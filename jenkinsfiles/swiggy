pipeline {
    agent any

    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }

    environment {
        SONARQUBE_SERVER   = 'sonar-server'                          // Jenkins -> Configure System -> SonarQube servers (name)
        AWS_ACCOUNT_ID     = '421954350274'
        AWS_ECR_REPO_NAME  = 'swiggy'
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI     = "421954350274.dkr.ecr.us-east-1.amazonaws.com"
    }

    stages {

        stage('Initialize Tools') {
            steps {
                script {
                    // set SCANNER_HOME correctly (can't reliably call `tool` inside env for all setups)
                    env.SCANNER_HOME = tool 'sonar-scanner'
                }
            }
        }

        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'master', url: 'https://github.com/arumullayaswanth/Swiggy-GitOps-project.git'
            }
        }

        stage('List Files') {
            steps {
                sh 'ls -la'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                dir('Swiggy') {
                    withSonarQubeEnv(env.SONARQUBE_SERVER) {
                        sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                          -Dsonar.projectKey=swiggy \
                          -Dsonar.projectName=swiggy
                        """
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        // credentialsId is NOT a valid arg for waitForQualityGate
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                  cd Swiggy
                  if [ -f package.json ]; then
                      rm -rf node_modules package-lock.json
                      npm install
                  else
                      echo "Error: package.json not found in Swiggy!"
                      exit 1
                  fi
                '''
            }
        }

        stage('OWASP FS Scan') {
            steps {
                dir('Swiggy') {
                    dependencyCheck additionalArguments: '--scan . --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('client') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                dir('Swiggy') {
                    sh '''
                      docker system prune -f
                      docker container prune -f
                      docker build -t ${AWS_ECR_REPO_NAME}:latest .
                    '''
                }
            }
        }

        stage('ECR Image Pushing') {
            steps {
                sh '''
                  aws ecr get-login-password --region ${AWS_DEFAULT_REGION} \
                    | docker login --username AWS --password-stdin ${REPOSITORY_URI}
                  docker tag ${AWS_ECR_REPO_NAME}:latest ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                  docker push ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                '''
            }
        }

        stage('TRIVY Image Scan') {
            steps {
                sh 'trivy image ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt'
            }
        }

        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "Swiggy-GitOps-project"
                GIT_EMAIL     = "yaswanth.arumulla@gmail.com"
                GIT_USER_NAME = "arumullayaswanth"
                YAML_FILE     = "deployment.yml"
            }
            steps {
                dir('kubernetes-files') {
                    withCredentials([string(credentialsId: 'my-git-pattoken', variable: 'git_token')]) {
                        sh """
                          git config user.email "${GIT_EMAIL}"
                          git config user.name "${GIT_USER_NAME}"

                          sed -i "s#image:.*#image: ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}#g" ${YAML_FILE}
                          git add ${YAML_FILE}
                          git commit -m "Update ${AWS_ECR_REPO_NAME} image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                          git push https://${git_token}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            emailext(
                attachLog: true,
                subject: "'${currentBuild.result}'",
                body: """
                    Project: ${env.JOB_NAME}<br/>
                    Build Number: ${env.BUILD_NUMBER}<br/>
                    URL: ${env.BUILD_URL}<br/>
                """,
                to: 'yaswanth.arumulla@gmail.com',
                attachmentsPattern: 'trivyfs.txt,trivyimage.txt,**/dependency-check-report.xml'
            )
        }
    }
}
